{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","status","handleChange","event","target","name","value","props","filterTodosByTitle","filterTodosByStatus","setState","this","selectUser","shuffleTodos","todos","className","type","onChange","onClick","map","todo","key","id","classNames","completed","readOnly","checked","title","userId","React","PureComponent","request","url","fetch","then","response","json","CurrentUser","user","loading","loadData","prevProps","result","data","clearUser","email","phone","Component","App","filteredTodos","selectedUserId","validateTodos","filter","prevState","includes","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f85be74.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    query: '',\n    status: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    const { filterTodosByTitle, filterTodosByStatus } = this.props;\n\n    this.setState({\n      [name]: value,\n    });\n\n    if (name === 'query') {\n      filterTodosByTitle(value);\n\n      return;\n    }\n\n    if (name === 'status') {\n      filterTodosByStatus(value);\n    }\n  }\n\n  render() {\n    const { query, status } = this.state;\n    const { selectUser, shuffleTodos, todos } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <div>\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"status\"\n            value={status}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={shuffleTodos}\n          >\n            Shuffle\n          </button>\n        </div>\n\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--checked': todo.completed },\n                    { 'TodoList__item--unchecked': !todo.completed },\n                  )\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User # ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  filterTodosByTitle: PropTypes.func.isRequired,\n  filterTodosByStatus: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json());\n\nexport const getTodos = () => request('/todos')\n  .then(result => result.data);\n\nexport const getUser = id => request(`/users/${id}`)\n  .then(result => result.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    loading: false,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const { userId } = this.props;\n    const user = await getUser(userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user\n          ? (\n            <>\n              <h2\n                className=\"CurrentUser__title\"\n              >\n                <span>\n                  {`Selected user: ${user.id}`}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={clearUser}\n              >\n                Clear\n              </button>\n            </>\n          )\n          : (<h3>Loading</h3>)\n        }\n\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filteredTodos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: this.validateTodos(todos),\n      filteredTodos: this.validateTodos(todos),\n    });\n  }\n\n  validateTodos = todos => todos.filter(todo => (\n    todo.id\n      && todo.userId\n      && todo.title\n      && typeof todo.completed === 'boolean'\n  ))\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  filterTodosByTitle = (value) => {\n    this.setState(prevState => ({\n      filteredTodos: [...prevState.todos]\n        .filter(todo => todo.title.includes(value)),\n    }));\n  }\n\n  filterTodosByStatus = (value) => {\n    if (value === 'completed') {\n      this.setState(prevState => ({\n        filteredTodos: [...prevState.todos]\n          .filter(todo => todo.completed === true),\n      }));\n\n      return;\n    }\n\n    if (value === 'active') {\n      this.setState(prevState => ({\n        filteredTodos: [...prevState.todos]\n          .filter(todo => todo.completed === false),\n      }));\n\n      return;\n    }\n\n    this.setState(prevState => ({\n      filteredTodos: [...prevState.todos],\n    }));\n  }\n\n  shuffleTodos = () => {\n    this.setState(prevState => ({\n      filteredTodos: [...prevState.filteredTodos]\n        .sort(() => Math.random() - 0.5),\n    }));\n  }\n\n  render() {\n    const { filteredTodos, selectedUserId, query } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            selectUser={this.selectUser}\n            filterTodosByTitle={this.filterTodosByTitle}\n            filterTodosByStatus={this.filterTodosByStatus}\n            shuffleTodos={this.shuffleTodos}\n            title={query}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}